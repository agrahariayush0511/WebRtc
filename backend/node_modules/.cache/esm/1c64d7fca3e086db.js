let crypto,twilio,SMS_SID,SMS_AUTH_TOKEN,SMS_FROM_NUMBER,HashService;_a3e‍.x([["default",()=>_a3e‍.o]]);_a3e‍.w("crypto",[["default",["crypto"],function(v){crypto=v}]]);_a3e‍.w("twilio",[["default",["twilio"],function(v){twilio=v}]]);_a3e‍.w("../config",[["SMS_SID",["SMS_SID"],function(v){SMS_SID=v}],["SMS_AUTH_TOKEN",["SMS_AUTH_TOKEN"],function(v){SMS_AUTH_TOKEN=v}],["SMS_FROM_NUMBER",["SMS_FROM_NUMBER"],function(v){SMS_FROM_NUMBER=v}]]);_a3e‍.w("./hash-service",[["default",["HashService"],function(v){HashService=v}]]);




const sendSms = twilio(SMS_SID, SMS_AUTH_TOKEN, {
    lazyLoading: true
})

class OtpService {


    // * generating Otp---------
    // *------------
    generateOtp() {
        const otp = crypto.randomInt(1000, 9999)
        return otp;
    }

    // * sending Otp -------- 
    // *-----------------
    async sendBySms(phone, otp) {
        return await sendSms.messages.create({
            to:phone,
            from: SMS_FROM_NUMBER,
            body: `Your codersHouse OTP is ${otp}`
        }) 
    }

        // * verifying Otp -------- 
    // *-----------------

    verifyOtp(hashedOtp, data) {
        let computedHash = HashService.hashOtp(data)
        return computedHash === hashedOtp 
    }
}

_a3e‍.d(new OtpService());