let jwt,JWT_ACCESS_SECRET,JWT_REFRESH_SECRET,refreshSchema;_535‍.x([["default",()=>_535‍.o]]);_535‍.w("jsonwebtoken",[["default",["jwt"],function(v){jwt=v}]]);_535‍.w("../config",[["JWT_ACCESS_SECRET",["JWT_ACCESS_SECRET"],function(v){JWT_ACCESS_SECRET=v}],["JWT_REFRESH_SECRET",["JWT_REFRESH_SECRET"],function(v){JWT_REFRESH_SECRET=v}]]);_535‍.w("../models/refresh-model",[["default",["refreshSchema"],function(v){refreshSchema=v}]]);



class TokenService {
    generateTokens (payload) {
        const accessToken = jwt.sign(payload,JWT_ACCESS_SECRET , {
            expiresIn: '5s'
        })

        const refreshToken = jwt.sign(payload,JWT_REFRESH_SECRET , {
            expiresIn: '1y'
        })

        return {accessToken, refreshToken}
    }

    async storeRefreshToken (token, userId) {
        try {
            const res = await refreshSchema.create({
                token, userId
            })
        }
        catch(err){
            _535‍.g.console.log(err.message)
        }
    }

    async verifyAccessToken(token) {
        return jwt.verify(token, JWT_ACCESS_SECRET)
    }

    async verifyRefreshToken(refreshToken) {
        return jwt.verify(refreshToken, JWT_REFRESH_SECRET)        
    }

    async findRefreshToken(userId, refreshToken) {
        return await refreshSchema.findOne({
            userId: userId,
             token: refreshToken
            })
    }


    async updateRefreshToken(userId, refreshToken) {
        return await refreshSchema.updateOne({userId}, {token: refreshToken})
    }

    async removeToken(refreshToken) {
        return await refreshSchema.deleteOne({token: refreshToken})
    }

}

_535‍.d(new TokenService());